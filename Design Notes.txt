ahRkZXZ-c3RyYWlnaHRnaW4tMTIzNHIRCxIER2FtZRiAgICAgND7CQw

TODO:
- review Notes from end of Scalable Apps re: logging
- work on decorators

https://github.com/udacity/FSND-P4-Design-A-Game/blob/master/Project-Description.md
https://cloud.google.com/appengine/articles/modeling http://stackoverflow.com/questions/24392270/many-to-many-relationship-in-ndb

1. Explore existing game
2a. Modify existing Guess-A-Number game to other game
2b. Define/store what score is & whatever other relevant data for the game
3. Extend endpoints
    "get_user_rankings" -> rank_by_win_rate
   
4a. Improve notifications - see "cron.yaml" and "main.py" - modify e-mail reminders so they only go to users with incomplete games (or whose turn it is)
4b. Turn notification system - as soon as one player completes a turn, notify other player (send their hand and the draw card and instructions) that they should play
5a. Create README with 1) play instructions and 2) descriptions of endpoints
5b. Document design decisions: additional properties added to models & why; Trade-offs/struggles when implementing game logic? [Design.txt - 500 words]
--------------------------------------
Working API methods, including throwing proper errors:
cancelGame, createUser, endMove [double-check win], getGame, getGameHistory, getHand, getScores, getUserGames, getUserRankings, getUserScores, newGame, startMove [check end of Deck]

cancel_game, create_user, get_game, get_game_history, get_game_score, get_hand, get_scores, get_high_scores, get_scores, get_user_games, new_game, start_move, 


To Check:
end_move (at win)
start_move (end of Deck)
get_user_rankings - probably need to move win_rate back into User or learn how to order by item in Form

----------------------------------------
----------------------------------------
DONE Rule modifications:
player who validly goes OUT is winner
player who invalidly attempts to go OUT is loser
if neither player can go OUT before deck runs out,
player with lower deadwood score (where face cards != 10) is winner

DONE? Build Logic of verifying winning hand

DONE MakeMoveForm - edit per game logic!

DONE Game Logic
 - getHand - report hand of nextMove

 - each move -> startMove and endMove
DONEstartMove
   2. user inputs faceUpCard or drawPile
   3. game updates user's hand and deck (drawPile)
   4. game reports user's updated hand w/ dict representation

DONE endMove
DONE   5. user inputs discard and flag if going out
DONE   6. game updates user's hand and faceUpCard with discard
DONE   7a. if !out, game reports nextMove user's hand w/ dict representation
        and flip nextMove
DONE   7b. elif out, game verifies user's hand as winner

newRound
   
DONE hand_to_form()
DONE HandForm
DONE - Default list of full deck
DONE - def dealHand()
DONE - changes in models.py
DONE - Game - rename user_x, user_o
            - change board to deck [pickle-able list of ints - available cards]
            - add faceUpCard
            - add deal - int for "round"
            - add dealer - at end of round, flip
            - add p1 & p2 hands - pickle-able lists
            - add p1 & p2 points - ints
            - edit new_game & to_form & end_game

--------------------------------------
Gin

H D S C
K Q J 10 9 8 7 6 5 4 3 2 A
Cards displayed to user as Suit-Value (i.e. H-6)

Each card also associated with int 1-52
At beginning of game, full deck available

Round:
Deal X cards to each player
Flip top card and show
Player chooses top card or drawPile
Player discards (and optionally "goes out")
Alternate player turns until someone goes out
Verify hand once player goes out

-----------------------
313

H D S C
K Q J 10 9 8 7 6 5 4 3
W1, W2 = wild = Joker

Cards displayed to user as Suit-Value (i.e. H-6)

Each card also associated with int 1-46
At beginning of each hand, full deck available (11 * 4) + 2 = 46 cards
RandNum%46 = card dealt
if that card already dealt, try again
