##Design Decisions
- I built my game from the Tic-Tac-Toe sample because it was already two-players. When I realized the extended endpoints (like get_user_games, cancel_game, etc) were already built in Tic-Tac-Toe, I deleted them entirely, so I would have the experience of building them from scratch, instead of adapting like I did with the make_move function.
- No changes made to User class or its helper methods as provided in Tic-Tac-Toe.
- I inherited from Tic-Tac-Toe and kept in the Game class: KeyProperties for both players (userA, userB), active (to indicate player whose turn it is), the gameOver boolean flag (to indicate no more moves can be made), winner (keyProperty) and history (stored in PickleProperty, represented by list of tuples).
- Cards are required for this game, so I had to define a FULL_DECK (a list of strings defined in constants.py), with a basic text representation of cards (suit-value), then create a function to deal cards from deck. Throughout a game, the cards remaining in deck after other cards dealt must be stored ("deck"), so I used the PickleProperty, which allowed me to preseve the list-of-strings representation of the deck. The hands (dealt cards - userAHand, userBHand) of each player and the faceUpCard (available for active player to pick up) are also stored with PickleProperty, for easy manipulation of lists when cards are added to or removed from a hand.
- So the newGame helper method creates the game, deals the two hands and faceUpCard, and stores the remaining deck in Game object.
- A player's turn happens in two phases. First (in "Start Move") the active player (whose turn it is) inputs whether to take the faceUpCard (the most recently discarded card, whose value can be seen) or draw from the deck. The selected card is added to the active player's hand. Then (in "End Move") the active player must input which card from his/her hand to discard. That discard is removed from active player's hand and becomes the faceUpCard for the other player - who becomes the active player as soon as the discard move ("End Move") is complete.
- I intentionally separated gameForm from handForm, because I wanted the players to be able to see the state of the game (including whose turn it is) without peaking at each other's cards. In a sense "getHand" is step 0 before "startMove", so that the active player can see his/her hand, the faceUpCard, and the instructions (press 1 or 2) for inputting the draw decision.
- To accomodate the gameplay structure, I added a boolean flag for "midMove" (set to True as "Start Move" ends and to False as "End Move" ends), "instructions" (a string which prompts user what to input for each kind of move), and penaltyA, penaltyB, which records how many "deadwood" points a player had at the end of the game. In this version of Straight Gin, points are bad - a player gets them when he/she can NOT arrange all the cards in his/her hand into sets or runs.
- The most fun (and challenging) part of designing this game was writing the code to verify a winning player's hand. First I transform the hand from a human-readable form to a python-readable form (grouping by suits, changing K (kings) into 13, etc). Then each suit group is tested for a run of at least 3 cards in a row. Long runs (4+ cards) are stored to help with short sets later. Then the leftover cards (that didn't fit into a run) are checked for sets (multiple cards of the same number) of at least 3 each. A set of 1 or 2 cards could be completed if the missing multiples can be found at the beginning or end of a previous long run. I developed my most formal test suite ever for this code, trying with 12 different sample hands with different qualities (one long run, two runs in two suits, three runs in two suits, etc). It took a long time to debug the code so that it passed all tests, but I felt really good about it afterwards.
- For now I've kept the Score class as inherited from Tic-Tac-Toe, with date, winner and loser. But I might add the penalty scores as well, which indicate how well or badly someone lost. That information is currently available through the gameRecordForm.